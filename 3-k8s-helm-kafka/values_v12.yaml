# ==================
# export KUBECONFIG=~/.kube/config
# mkdir ~/.kube 2> /dev/null
# sudo k3s kubectl config view --raw > "$KUBECONFIG"
# chmod 600 "$KUBECONFIG"
# ==================

# B1:
# helm install kafka bitnami/kafka -f  https://raw.githubusercontent.com/phucng2017/k8s/refs/heads/main/3-k8s-helm-kafka/values_v12.yaml --create-namespace --namespace kafka

#B2:
# LAY PASSWORD:
# kubectl get secret kafka-user-passwords --namespace default -o jsonpath='{.data.client-passwords}' | base64 -d | cut -d , -f 1
# vi client.properties
# =======
# security.protocol=SASL_PLAINTEXT
# sasl.mechanism=PLAIN
# sasl.jaas.config=org.apache.kafka.common.security.plain.PlainLoginModule required username="user1" password="$(kubectl get secret kafka-user-passwords --namespace default -o jsonpath='{.data.client-passwords}' | base64 -d | cut -d , -f 1)";

# ==============
# vi c.pro
# security.protocol=SASL_PLAINTEXT
# sasl.mechanism=SCRAM-SHA-256
# sasl.jaas.config=org.apache.kafka.common.security.scram.ScramLoginModule required \
#     username="user1" \
#     password="$(kubectl get secret kafka-user-passwords --namespace default -o jsonpath='{.data.client-passwords}' | base64 -d | cut -d , -f 1)";
# =======

# B3: 
# vi jaas.conf
# KafkaClient {
#   org.apache.kafka.common.security.plain.PlainLoginModule required
#   username="user1"
#   password="$(kubectl get secret kafka-user-passwords --namespace default -o jsonpath='{.data.client-passwords}' | base64 -d | cut -d , -f 1)";
# };


# B4:
# kubectl run kafka-client --restart='Never' --image docker.io/bitnami/kafka:3.9.0-debian-12-r4 --namespace default --command -- sleep infinity
# kubectl cp --namespace default client.properties my-release-kafka-client:/tmp/client.properties
# kubectl cp --namespace default jaas.conf my-release-kafka-client:/tmp/jaas.conf
# kubectl exec --tty -i kafka-client --namespace default -- bash

# kubectl cp --namespace default c.pro kafka-client:/tmp/c.pro
# kubectl cp --namespace default j.c kafka-client:/tmp/j.c
# kubectl exec --tty -i kafka-client --namespace default -- bash
# export KAFKA_OPTS="-Djava.security.auth.login.config=/tmp/j.c"
# kafka-console-producer.sh --topic test-topic --producer.config /tmp/c.pro --bootstrap-server kafka.default.svc.cluster.local:9092
# kafka-console-producer.sh \
#             --producer.config /tmp/c.pro \
#             --bootstrap-server kafka-topics.sh --version \
#             --topic test
# kafka-console-consumer.sh \
#             --consumer.config /tmp/c.pro \
#             --bootstrap-server kafka.default.svc.cluster.local:9092 \
#             --topic test \
#             --from-beginning

# B5: Trong kafka_client:
# export KAFKA_OPTS="-Djava.security.auth.login.config=/tmp/jaas.conf"
# # kafka-console-producer.sh --bootstrap-server kafka.default.svc.cluster.local:9092 --topic test-topic --producer.config /tmp/client.properties
#     # PRODUCER:
        # kafka-console-producer.sh \
        #     --producer.config /tmp/c.pro \
        #     --bootstrap-server kafka-topics.sh --version \
        #     --topic test
#     # CONSUMER:
        # kafka-console-consumer.sh \
        #     --consumer.config /tmp/client.properties \
        #     --bootstrap-server kafka.default.svc.cluster.local:9092 \
        #     --topic test \
        #     --from-beginning

# =============
# Tham thao: 
# helm install my-release -f https://raw.githubusercontent.com/phucng2017/k8s/refs/heads/main/k8s-helm-kafka/values_v3.yaml oci://registry-1.docker.io/bitnamicharts/kafka --version 28.0.4
# helm install my-release oci://registry-1.docker.io/bitnamicharts/kafka
# helm uninstall my-release
# kubectl get svc
# kubectl get pod

# helm uninstall kafka
# =============

# controller:
#   replicaCount: 3
#   persistence:
#     enabled: true
#     size: 20Gi
#   resources:
#     requests:
#       cpu: 500Mi
#       memory: 512Mi
#     limits:
#       cpu: 1Gi
#       memory: 1024Mi

# zookeeper:
#   enabled: false
#   replicaCount: 1
#   persistence:
#     enabled: true
#     storageClass: ""
#     accessModes:
#       - ReadWriteOnce
#     size: 10Gi
#   resources:
#     requests:
#       cpu: 500Mi
#       memory: 512Mi
#     limits:
#       cpu: 1Gi
#       memory: 1024Mi

# auth:
#   clientProtocol: SASL_PLAINTEXT  # Sử dụng SASL_PLAINTEXT cho client
#   interBrokerProtocol: SASL_PLAINTEXT  # Sử dụng SASL_PLAINTEXT giữa các brokers
#   jaas:
#     clientUsers:  # Danh sách users và passwords cho client
#       - username: user1
#         password: "9ZxnKEDFiM"
#     interBrokerUser: admin  # User và password cho giao tiếp giữa các brokers
#     interBrokerPassword: "admin-password"


#========
# CÁCH 2: CHẠY OK
#========
replicaCount: 3
persistence:
  enabled: true
  size: 20Gi
resources:
  requests:
    memory: "512Mi"
    cpu: "500m"
  limits:
    memory: "1Gi"
    cpu: "1"
auth:
  clientProtocol: SASL_PLAINTEXT  # Sử dụng SASL_PLAINTEXT cho client
  interBrokerProtocol: SASL_PLAINTEXT  # Sử dụng SASL_PLAINTEXT giữa các brokers
  jaas:
    clientUsers:  # Danh sách users và passwords cho client
      - username: user1
        password: "9ZxnKEDFiM"
    interBrokerUser: admin  # User và password cho giao tiếp giữa các brokers
    interBrokerPassword: "admin-password"
